-- Based on https://github.com/Quenty/NevermoreEngine/tree/main/src/octree
-- Has same functions and intent as k-d tree 
-- Adapted for usage in Anomaly by demonized

--[=[
    Octree implementation. An octree is a data structure that allows for quick spatial
    data queries of static objects. For example, trees can be stored in an octree, and
    nearby trees could be found near the player.
    Octrees exists as a grid of nodes, which are subdivided in half in each axis, which
    results in 8 different regions. This recursively happens to a set depth.
    This allows for O(n) data storage and log(n) retrieval of nearby objects. With a large
    quantity of items in the octree, this can make data retrieval significantly faster.
    See also: https://en.wikipedia.org/wiki/Octree
    ```lua
    local octree = Octree.new()
    octree:CreateNode(Vector3.new(0, 0, 0), "A")
    octree:CreateNode(Vector3.new(0, 0, 0), "B")
    octree:CreateNode(Vector3.new(0, 0, 0), workspace)
    octree:CreateNode(Vector3.new(0, 0, 1000), "C")
    print(octree:RadiusSearch(Vector3.new(0, 0, 0), 100)) --> { "A", "B", workspace }
    ```
    :::tip
    Octrees are best for static objects in the world, and not objects moving around, since then
    data can be statically cached.
    Sometimes using Roblox's spatial hash using the region API is faster than using an octree. However,
    for data that is centralized, or static, an octree can be a very efficient spatial query mechanism.
    That said, it is totally fine to track the objects that DO move around using octree, as long as you 
    apply proper optimizations. The main performance cost of doing this comes down to tracking and 
    upating the position of the objects, which is fine if: 
        1) You have a way to detect the movement without having to loop through all the moving 
        objects to update the position
        2) You can tolerate some inaccuracy with positions and smear this update
        3) You have less than 1000 objects to track, in this case looping through everything 
        shouldn't be too costly. 
    :::
    @class Octree
]=]

local table_insert = table.insert
local table_sort = table.sort

local math_floor = math.floor
local math_huge = math.huge
local math_min = math.min

local function position_table(pos)
    return {
        x = pos.x or pos[1],
        y = pos.y or pos[2],
        z = pos.z or pos[3]
    }
end

-- http://lua-users.org/wiki/BinaryInsert
local function binary_insert(t, value, fcomp)
    -- Initialise compare function
    local fcomp = fcomp or function(a, b) return a < b end

    -- print_table(value)

    --  Initialise numbers
    local iStart, iEnd, iMid, iState = 1, #t, 1, 0

    if iEnd == 0 then
        t[1] = value
        -- printf("adding in beginning table empty")
        return 1
    end

    if fcomp(value, t[1]) then
        -- printf("adding in beginning %s of %s", 1, iEnd)
        table_insert(t, 1, value)
        return 1
    end

    if not fcomp(value, t[iEnd]) then
        -- printf("adding in end %s of %s", iEnd + 1, iEnd)
        local pos = iEnd + 1
        t[pos] = value
        return pos
    end

    -- Get insert position
    while iStart <= iEnd do

        -- calculate middle
        iMid = math_floor((iStart + iEnd) / 2)

        -- compare
        if fcomp(value, t[iMid]) then
            iEnd, iState = iMid - 1, 0
        else
            iStart, iState = iMid + 1, 1
        end
    end

    local pos = iMid + iState
    -- printf("adding in middle %s of %s", pos, iEnd)
    table_insert(t, pos, value)
    return pos
end

local function comp_function(a, b)
    return a[2] < b[2]
end

local EPSILON = 1e-9

function Octree()
    local Octree = {}

    --[=[
        Constructs a new Octree.
        @return Octree<T>
    ]=]

    function Octree:__init()

        self._maxRegionSize = { 512, 512, 512 } -- these should all be the same number
        self._maxDepth = 4
        self._regionHashMap = {} -- [hash] = region

        self.ClassName = "Octree"

        return self
    end

    function Octree:__finalize()

    end

    Octree:__init()
    --[=[
        Returns all octree nodes stored in the octree!
        ```lua
        local octree = Octree.new()
        octree:CreateNode(Vector3.new(0, 0, 0), "Hi")
        octree:CreateNode(Vector3.new(0, 0, 0), "Bob")
        print(octree:GetAllNodes()) --> { "Hi", "Bob" }
        ```
        Order is not guaranteed.
        :::warning
        If you have 100,000 nodes in your octree, this is going to be very slow.
        :::
        @return { OctreeNode<T> }
    ]=]
    function Octree:GetAllNodes()
        local options = {}

        for _, regionList in pairs(self._regionHashMap) do
            for _, region in pairs(regionList) do
                for node, _ in pairs(region.nodes) do
                    options[#options+1] = node
                end
            end
        end

        return options
    end

    --[=[
        Creates a new OctreeNode at the given position which can be retrieved
        :::tip
        Be sure to call :Destroy() on a node if the data becomes stale. Note that
        this is not necessary if the whole octree is removed from memory.
        :::
        ```lua
        local octree = Octree.new()
        octree:CreateNode(Vector3.new(0, 0, 0), "A")
        octree:CreateNode(Vector3.new(0, 0, 0), "B")
        ```
        @param position Vector3
        @param object T
        @return OctreeNode<T>
    ]=]
    function Octree:CreateNode(position, object)
        -- assert(typeof(position) == "Vector3", "Bad position value")
        -- assert(object, "Bad object value")

        local node = OctreeNode(self, object)
        node:SetPosition(position)
        return node
    end

    --[=[
        Searches at the position and radius for any objects that may be within
        this radius.
        ```lua
        local octree = Octree.new()
        octree:CreateNode(Vector3.new(0, 0, 0), "A")
        octree:CreateNode(Vector3.new(0, 0, 0), "B")
        octree:CreateNode(Vector3.new(0, 0, 1000), "C")
        print(octree:RadiusSearch(Vector3.new(0, 0, 0), 100)) --> { "A", "B" }
        ```
        @param position Vector3
        @param radius number
        @return { T } -- Objects found
        @return { number } -- Distances squared
    ]=]
    function Octree:RadiusSearch(position, radius)
        -- assert(typeof(position) == "Vector3", "Bad position")
        -- assert(type(radius) == "number", "Bad radius")

        local px, py, pz = position.x, position.y, position.z
        local o = self:_radiusSearch(px, py, pz, radius)
        return o
    end

    --[=[
        Searches at the position and radius for any objects that may be within
        this radius. Returns the knearest entries.
        The closest entities will be first in the list.
        @param position Vector3
        @param k number -- Number of objects to find
        @param radius number
        @return { any } -- Objects found
        @return { number } -- Distances squared
    ]=]
    function Octree:KNearestNeighborsSearch(position, k, radius)
        -- assert(typeof(position) == "Vector3", "Bad position")
        -- assert(type(radius) == "number", "Bad radius")
        local k = k or 1
        local radius = radius or math_huge
        local px, py, pz = position.x, position.y, position.z
        local objects, nodeDistances2 = self:_radiusSearch(px, py, pz, radius)
        table_sort(objects, comp_function)
        if k > #objects then
            return objects
        else
            local knearest = {}
            for i = 1, math_min(#objects, k) do
                knearest[i] = sortable[i]
            end

            return knearest
        end
    end

    Octree.nearest = Octree.KNearestNeighborsSearch

    --[=[
        Internal API to create lowest subregion
        @private
        @param px number
        @param py number
        @param pz number
        @return OctreeSubregion
    ]=]
    function Octree:GetOrCreateLowestSubRegion(px, py, pz)
        local region = self:_getOrCreateRegion(px, py, pz)
        return OctreeRegionUtils.getOrCreateSubRegionAtDepth(region, px, py, pz, self._maxDepth)
    end

    function Octree:_radiusSearch(px, py, pz, radius)
        local objectsFound = {}
        local nodeDistances2 = {}

        local diameter = self._maxRegionSize[1]
        local searchRadiusSquared = OctreeRegionUtils.getSearchRadiusSquared(radius, diameter, EPSILON)

        for _, regionList in pairs(self._regionHashMap) do
            for _, region in pairs(regionList) do
                local rpos = region.position
                local rpx, rpy, rpz = rpos[1], rpos[2], rpos[3]
                local ox, oy, oz = px - rpx, py - rpy, pz - rpz
                local dist2 = ox*ox + oy*oy + oz*oz

                if dist2 <= searchRadiusSquared then
                    OctreeRegionUtils.getNeighborsWithinRadius(
                        region, radius, px, py, pz, objectsFound, nodeDistances2, self._maxDepth)
                end
            end
        end

        return objectsFound
    end

    function Octree:_getRegion(px, py, pz)
        return OctreeRegionUtils.findRegion(self._regionHashMap, self._maxRegionSize, px, py, pz)
    end

    function Octree:_getOrCreateRegion(px, py, pz)
        return OctreeRegionUtils.getOrCreateRegion(self._regionHashMap, self._maxRegionSize, px, py, pz)
    end

    return Octree
end

--[=[
    Basic node interacting with the octree. See [Octree](/api/Octree) for usage.
    ```lua
    local octree = Octree.new()
    local node = octree:CreateNode(Vector3.new(0, 0, 0), "A")
    print(octree:RadiusSearch(Vector3.new(0, 0, 0), 100)) --> { "A" }
    node:Destroy() -- Remove node from octree
    print(octree:RadiusSearch(Vector3.new(0, 0, 0), 100)) --> { }
    ```
    @class OctreeNode
]=]

--[=[
    Creates a new for the given Octree with the object.
    :::warning
    Use Octree:CreateNode() for more consistent results. To use this object directly
    you need to set the position before it's registered which may be unclean.
    :::
    @private
    @param octree Octree
    @param object T
    @return OctreeNode<T>
]=]

function OctreeNode(octree, object)
    local OctreeNode = {}

    function OctreeNode:__init(octree, object)
        self._octree = octree or error("No octree")
        self._object = object or error("No object")

        self._currentLowestRegion = nil
        self._position = nil

        self.ClassName = "OctreeNode"

        return self
    end

    function OctreeNode:__finalize()

    end

    OctreeNode:__init(octree, object)

    --[=[
        Finds the nearest neighbors to this node within the radius
        ```lua
        local octree = Octree.new()
        local node = octree:CreateNode(Vector3.new(0, 0, 0), "A")
        octree:CreateNode(Vector3.new(0, 0, 5), "B")
        print(octree:KNearestNeighborsSearch(10, 100)) --> { "A", "B" } { 0, 25 }
        ```
        @param k number -- The number to retrieve
        @param radius number -- The radius to search in
        @return { T } -- Objects found, including self
        @return { number } -- Distances squared
    ]=]
    function OctreeNode:KNearestNeighborsSearch(k, radius)
        return self._octree:KNearestNeighborsSearch(self._position, k, radius)
    end

    --[=[
        Returns the object stored in the octree
        ```lua
        local octree = Octree.new()
        local node = octree:CreateNode(Vector3.new(0, 0, 0), "A")
        print(octree:GetObject()) --> "A"
        ```
        @return T
    ]=]
    function OctreeNode:GetObject()
        return self._object
    end

    --[=[
        Finds the nearest neighbors to the octree node
        @param radius number -- The radius to search in
        @return { any } -- Objects found
        @return { number } -- Distances squared
    ]=]
    function OctreeNode:RadiusSearch(radius)
        return self._octree:RadiusSearch(self._position, radius)
    end

    --[=[
        Retrieves the position
        @return Vector3
    ]=]
    function OctreeNode:GetPosition()
        return self._position
    end

    --[=[
        Retrieves the as px, py, pz
        @return number -- px
        @return number -- py
        @return number -- pz
    ]=]
    function OctreeNode:GetRawPosition()
        return self._px, self._py, self._pz
    end

    --[=[
        Sets the position of the octree nodes and updates the octree accordingly
        ```lua
        local octree = Octree.new()
        local node = octree:CreateNode(Vector3.new(0, 0, 0), "A")
        print(octree:RadiusSearch(Vector3.new(0, 0, 0), 100)) --> { "A" }
        node:SetPosition(Vector3.new(1000, 0, 0))
        print(octree:RadiusSearch(Vector3.new(0, 0, 0), 100)) --> {}
        ```
        @param position Vector3
    ]=]
    function OctreeNode:SetPosition(position)
        local position = position_table(position)
        if self._position == position then
            return
        end

        local px, py, pz = position.x, position.y, position.z

        self._px = px
        self._py = py
        self._pz = pz
        self._position = position

        if self._currentLowestRegion then
            if OctreeRegionUtils.inRegionBounds(self._currentLowestRegion, px, py, pz) then
                return
            end
        end

        local newLowestRegion = self._octree:GetOrCreateLowestSubRegion(px, py, pz)

        -- Sanity check for debugging
        -- if not OctreeRegionUtils.inRegionBounds(newLowestRegion, px, py, pz) then
        --  error("[OctreeNode.SetPosition] newLowestRegion is not in region bounds!")
        -- end

        if self._currentLowestRegion then
            OctreeRegionUtils.moveNode(self._currentLowestRegion, newLowestRegion, self)
        else
            OctreeRegionUtils.addNode(newLowestRegion, self)
        end

        self._currentLowestRegion = newLowestRegion
    end

    --[=[
        Removes the OctreeNode from the octree
    ]=]
    function OctreeNode:Destroy()
        if self._currentLowestRegion then
            OctreeRegionUtils.removeNode(self._currentLowestRegion, self)
        end
    end

    return OctreeNode
end

-- Actual usage starts here
--[[

When you build position tree, you can find nearest objects in relation to other objects
Example, find nearest position to actor:
    local pos_tree = kd_tree.buildTreeObjectIds({45, 65, 23, 5353, 232})
    print_table(pos_tree:nearest(db.actor:position()))

will print position, distance and id of nearest object from given ids

--]]

-- Build k-d Tree by several inputs
-- Input - Array of vectors (vector():set(x, y, z) or table with x, y, z keys or 1, 2, 3 keys)
-- Data is an optional table where you can bind your data to your object, must have same amount of fields as vectors (#vectors == #data)
function buildTreeVectors(vectors, data)
    local vectors = vectors or {}
    local data = data or {}
    local tree = Octree()
    for k, t in pairs(vectors) do
        tree:CreateNode(t, data[k])
    end
    return tree
end

-- Input - Array of game objects
-- Vectors are binded to object ids automatically
function buildTreeObjects(objects)
    local tree = Octree()
    for k, v in pairs(objects) do
        tree:CreateNode(v:position(), v:id())
    end
    return tree
end

-- Input - Array of server objects
-- Vectors are binded to object ids automatically
function buildTreeSeObjects(objects)
    local tree = Octree()
    for k, v in pairs(objects) do
        tree:CreateNode(v.position, v.id)
    end
    return tree
end

-- Input - Array of game object ids
-- Vectors are binded to object ids automatically
function buildTreeObjectIds(ids)
    local tree = Octree()
    local level_object_by_id = level.object_by_id
    for k, v in pairs(ids) do
        local obj = level_object_by_id(v)
        if obj and obj ~= 0 and obj:id() ~= 0 then
            tree:CreateNode(obj:position(), v)
        end
    end
    return tree
end

-- Input - Array of server object ids
-- Vectors are binded to object ids automatically
function buildTreeSeObjectIds(ids)
    local sim = alife()
    local sim_object = sim.object
    local tree = Octree()
    for k, v in pairs(ids) do
        local obj = sim_object(sim, v)
        if obj and obj ~= 0 and obj.id ~= 0 then
            tree:CreateNode(obj.position, v)
        end
    end
    return tree
end

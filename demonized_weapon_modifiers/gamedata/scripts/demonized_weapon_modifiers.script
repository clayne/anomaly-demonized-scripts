-- !!! MODDED EXES 1.5.2 IS REQUIRED !!!

local saved_weapons = {}
local weapon_callbacks_weapon_fired = false

modifiers = {}

-- Add weapon modifier
-- Weapon modifiers work only in player hands
-- weapon_modifier is the table of numbers or functions with keys that correspond to functions in lua_help_ex.script
-- Example, add modifier that will increase RPM by 1.5 times
--[[
	weapon_modifiers.add_modifier("rpm_increase", {

		-- Increase rpm when there is less than 3 bullets in the mag, the weapon is PM and its initial RPM is < 300
		-- c_wpn is the casted CWeapon class from game object, wpn is a game object
		-- weapon_params is the table of initial params of the weapon, they are values in available_modifiers table

		SetRealRPM = function(c_wpn, wpn, weapon_params)
			if wpn:section() == "wpn_pm" and c_wpn:GetAmmoElapsed() < 3 and weapon_params.RealRPM < 300 then
				return 1.5
			end
		end,

		-- Increase reload animation speed of PM
		-- anm_table is the animation parameters, wpn is a game object
		anm_speed = function(anm_table, wpn)
			if wpn:section() == "wpn_pm" and anm_table.anm_name == "anm_reload" then
				return 1.5
			end
		end,
	})
]]

-- Available weapon modifiers, key is a set function name, value is a get function name
available_modifiers = {
	SetRealRPM = "RealRPM",
	SetModeRealRPM = "ModeRealRPM"
}

function add_modifier(key, weapon_modifier)
	modifiers[key] = weapon_modifier
end

function remove_modifier(key)
	modifiers[key] = nil
end

function get_saved_weapon_params(id)
	return saved_weapons[id]
end

function save_current_weapon()
	local wpn = db.actor:active_item()
	if not wpn then return end

	local c_obj = wpn:cast_Weapon()
	if not c_obj then return end

	local id = wpn:id()
	if not saved_weapons[id] then
		saved_weapons[id] = {}
		for set, get in pairs(available_modifiers) do
			assert(c_obj[get] and c_obj[set], ("Can't modify weapon stats, get %s, set %s, reinstall Modded Exes"):format(get, set))
			saved_weapons[id][set] = c_obj[get](c_obj)
			saved_weapons[id][get] = saved_weapons[id][set]
		end
	end
end

function weapon_callbacks_on_hud_animation_play(anm_table, obj)
	if not anm_table.anm_name:find("^anm_idle") then
		local coeff = 1
		for k, v in pairs(modifiers) do
			if v.anm_speed then
				coeff = coeff * (type(v.anm_speed) == "number" and v.anm_speed or v.anm_speed(anm_table, obj, saved_weapons[obj:id()]) or 1)
			end
		end
		anm_table.anm_speed = anm_table.anm_speed * coeff
	end
end

function weapon_callbacks_on_weapon_before_fire()
	local wpn = db.actor:active_item()
	if not wpn then return end
	
	-- save_current_weapon()

	local id = wpn:id()
	if not saved_weapons[id] then
		return
	end

	local c_obj = wpn:cast_Weapon()
	if not c_obj then
		return
	end

	local coeffs = {}
	for k, v in pairs(modifiers) do
		for set, func in pairs(v) do
			if saved_weapons[id][set] then
				coeffs[set] = (coeffs[set] or 1) * (type(func) == "number" and func or func(c_obj, wpn, saved_weapons[id]) or 1)
			end
		end
	end

	for set, coeff in pairs(coeffs) do
		-- printf("setting modifier for %s: %s - %s", wpn:name(), set, coeff)
		c_obj[set](c_obj, saved_weapons[id][set] * coeff)
	end
end

function weapon_callbacks_actor_on_update()
	save_current_weapon()

	-- Iterate and restore old weapons to old values
	for id, v in pairs(saved_weapons) do
		local obj = level.object_by_id(id)
		if obj then
			local p = obj:parent()
			if not (p and p:id() == AC_ID) then
				local c_obj = obj:cast_Weapon()
				if c_obj then
					for set, val in pairs(v) do
						c_obj[set](c_obj, val)
					end
				end
				saved_weapons[id] = nil
			end
		end
	end

	weapon_callbacks_on_weapon_before_fire()
end

function on_game_start()
	RegisterScriptCallback("actor_on_hud_animation_play", weapon_callbacks_on_hud_animation_play)
	RegisterScriptCallback("actor_on_update", weapon_callbacks_actor_on_update)
end

